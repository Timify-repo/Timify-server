name: CI/CD-For-Timify

on:
  push:
    branches:
      - ci/19

jobs:
  my-action:
    runs-on: ubuntu-latest

    steps:
      # 리포지토리 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'

      # gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # Gradle로 빌드
      - name: Build with Gradle
        run: ./gradlew clean build

      # AWS CLI 설치 및 업데이트
      - name: Install and update AWS CLI
        run: |
          if command -v aws &> /dev/null; then
            echo "AWS CLI is already installed. Updating..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install --update
          else
            echo "Installing AWS CLI..."
            sudo apt-get update
            sudo apt-get install -y unzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          fi
          aws --version  # AWS CLI 버전 확인

      # AWS 인증 정보 구성
      - name: Configure AWS credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ap-northeast-2

      # 현재 배포된 버전 정보 가져오기
      - name: Get current version
        id: get-version
        run: |
          VERSION_LABEL=$(aws elasticbeanstalk describe-environments --application-name timify-springboot-application --environment-name Timify-springboot-application-env --query "Environments[0].VersionLabel" --output text)
          echo "VERSION_LABEL=${VERSION_LABEL}" >> $GITHUB_ENV
          echo "Current version label: ${VERSION_LABEL}"

      # 새로운 버전 라벨 생성 (현재 시간과 커밋 해시 사용)
      - name: Generate new version label
        id: generate-version-label
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          NEW_VERSION_LABEL=GitHubAction-${COMMIT_HASH}-$(date +'%Y%m%d%H%M%S')
          echo "NEW_VERSION_LABEL=${NEW_VERSION_LABEL}" >> $GITHUB_ENV
          echo "New version label: ${NEW_VERSION_LABEL}"

      # 배포 패키지 생성
      - name: Generate deployment package
        run: |
          mkdir -p deploy
          cp build/libs/*.jar deploy/
          cp Procfile deploy/
          cp -r .ebextensions deploy/
          cp -r .platform deploy/
          cd deploy && zip -r deploy.zip .

      # Elastic Beanstalk에 배포
      - name: Beanstalk Deploy
        uses: einaregilsson/beanstalk-deploy@v16
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: timify-springboot-application
          environment_name: Timify-springboot-application-env
          version_label: ${{ env.NEW_VERSION_LABEL }}
          region: ap-northeast-2
          deployment_package: deploy/deploy.zip
          wait_for_deployment: false

      # Elastic Beanstalk 환경 업데이트 (기존 버전으로 롤백 또는 새로운 버전으로 업데이트)
      - name: Update Elastic Beanstalk environment
        run: |
          aws elasticbeanstalk update-environment --application-name timify-springboot-application --environment-name Timify-springboot-application-env --version-label ${{ env.NEW_VERSION_LABEL }}
